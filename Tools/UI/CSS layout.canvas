{
	"nodes":[
		{"id":"453116ed86965151","type":"group","x":-72,"y":1120,"width":1672,"height":940,"label":"Values"},
		{"id":"8ab7af70508f97f5","type":"group","x":-72,"y":395,"width":1212,"height":618,"label":"Properties"},
		{"id":"dd86006f9ec99816","type":"group","x":-72,"y":2520,"width":1352,"height":440,"label":"Concepts"},
		{"id":"cba285bebc6c6800","type":"text","text":"# `justify-` properties\n\n| property          | effect |\n| ----------------- | ------ |\n| `justify-items`   |        |\n| `justify-self`    |        |\n| `justify-content` |        |\n- `justify-content` have different effects in different layout methods.","x":580,"y":415,"width":540,"height":289},
		{"id":"f00b9a23693f816e","type":"text","text":"# `align-` properties\n\n| property        | effect |\n| --------------- | ------ |\n| `align-items`   |        |\n| `align-self`    |        |\n| `align-content` |        |\n","x":580,"y":753,"width":540,"height":240},
		{"id":"0a6193bc62ab128c","type":"text","text":"## Alignment Properties","x":-52,"y":690,"width":397,"height":63},
		{"id":"09b5032ace73bd42","type":"file","file":"attachments/CSS-box-model.excalidraw.md","x":-380,"y":-920,"width":740,"height":490},
		{"id":"3088834259cb8d25","type":"text","text":"Old tricks","x":-520,"y":-1080,"width":160,"height":60},
		{"id":"38f356ebf0831c7d","type":"text","text":"### Alignment Type\n\n|        Type         | Definition                                                                                     |\n| :-----------------: | ---------------------------------------------------------------------------------------------- |\n|     positional      | pos of alignment subject in alignment container                                                |\n| baseline[^baseline] | a relationship among the baselines of multiple alignment subjects within an alignment context. |\n|     distributed     | a distribution of space among alignment subjects.                                              |\n[^baseline]: **Baseline alignment** is a CSS alignment concept used to align text or inline elements based on their **baseline**—the invisible line on which most letters \"sit.\" It ensures that text or inline content aligns consistently across different elements, even if they have different font sizes, line heights, or padding.","x":601,"y":1140,"width":959,"height":400},
		{"id":"5a319f3b30520d52","type":"text","text":"\n| type        | value                   | `on`                      | effect                               |\n| ----------- | ----------------------- | ------------------------- | ------------------------------------ |\n| positional  | `center`/`start`/`end`  | container                 |                                      |\n| positional  | `start`/`end`           | container, not in FlexBox |                                      |\n| positional  | `self-start`/`self-end` | item, self                | used in `justify-self`, `align-self` |\n| positional  | `flex-start`/`flex-end` | container, FlexBox only   | only works in flexbox                |\n| positional  | `left`/`right`          | container, not in FlexBox |                                      |\n| baseline    | `baseline`              |                           |                                      |\n| baseline    | `first baseline`        |                           |                                      |\n| baseline    | `last baseline`         |                           |                                      |\n| distributed | `stretch`               | container                 | `[--Item1--][--Item2--][--Item3--]`  |\n| distributed | `space-between`         | container                 | `[Item1]------[Item2]------[Item3]`  |\n| distributed | `space-around`          | container                 | `--[Item1]----[Item2]----[Item3]--`  |\n| distributed | `space-evenly`          | container                 | `---[Item1]---[Item2]---[Item3]---`  |\n","x":601,"y":1600,"width":959,"height":440},
		{"id":"93db746d2abdfdf7","type":"text","text":"# Alignment Values","x":-52,"y":1532,"width":397,"height":68},
		{"id":"fa149412f3d0138c","type":"text","text":"### Align Axis\n![[Pasted image 20250109162428.png]]\n1. inline or main axis: use `justify-` properties \n2. block or cross axis: use `align-` properties","x":741,"y":2540,"width":519,"height":400},
		{"id":"d274cb0809a242c8","type":"text","text":"## Alignment Concepts\n\n1. _alignment axis_\n2. _alignment subject_\n3. _alignment container_\n4. _fallback alignment_: different in each layout methods.\n\n\n","x":-35,"y":2649,"width":607,"height":183},
		{"id":"8df1f6ba922033a6","type":"text","text":"CSS Box Alignment\n","x":-1000,"y":1920,"width":237,"height":60,"color":"4"},
		{"id":"34e0943142095c0e","type":"text","text":"# Gap ","x":-52,"y":2253,"width":153,"height":50},
		{"id":"e540a5b164b56245","type":"text","text":"## `-gap` properties\n- `row-gap`: gap btw rows (vertical)\n- `column-gap` gap btw cols (horizontal)\n- `gap: <row-gap> <column-gap>`","x":210,"y":2200,"width":640,"height":156},
		{"id":"a8beaee388366639","type":"text","text":"# Flexbox property\n\n> Flexbox works from the content out.\n\n|     **On**     |   **Property**    | **Direction** | **Effect**                                      |\n| :------------: | :---------------: | :-----------: | :---------------------------------------------- |\n| flex container | `flex-direction`  |     main      | determines _main_ and _cross_ axis              |\n| flex container |    `flex-wrap`    |     main      | `nowrap` will overflow[^flex-wrap]              |\n| flex container |   `align-item`    |     cross     | align along crossing axis                       |\n| flex container | `justify-content` |     main      | align along main axis                           |\n|   flex item    |    `flex-grow`    |     main      | assign space to item's _main size_[^flex-grow]  |\n|   flex item    |   `flex-shrink`   |     main      | similar to `flex-grow` but shrink[^flex-shrink] |\n|   flex item    |   `flex-basiz`    |     main      | the initial main size before grow/shrink        |\n[^flex-grow]: how much of the flex container's _positive free space_, if any, should be assigned to the flex item's _main size_.\n[^flex-shrink]: If the size of all flex items is larger than the flex container, the flex items can shrink to fit according to their `flex-shrink` value. Each flex line's negative free space is distributed between the line's flex items that have a `flex-shrink` value greater than `0`.\n[^flex-wrap]: notice that if the value is `wrap` then the flex container will first try to wrap the item list before perform any flex shrink action\n\n# Box alignment\n\n- define `justify-content` on flex container to align items along main axis;\n- define `align-items` on flex container to align items along cross axis;\n- define `align-self` on flex item to override cross axis alignment;\n- `justify-self` is ignored.","x":-80,"y":3060,"width":981,"height":900,"color":"4"},
		{"id":"b50f2c351cdc4146","x":1080,"y":3180,"width":981,"height":280,"type":"text","text":"# Trick: auto margin \n\nA margin set to `auto` will absorb all available space in its dimension. This is how centering a block with auto margins works. By setting the left and right margin to `auto`, both sides of our block try to take up all of the available space and so push the box into the centre.\n\nUsing `margin-left: auto` to construct a splited navigation bar:\n<div style=\"display: flex; border: 2px dotted rgb(96 139 168)\">\n  <div>One</div>\n  <div>Two</div>\n  <div>Three</div>\n  <div style=\"margin-left:auto\">Four</div>\n  <div>Five</div>\n</div>\n\n"},
		{"id":"66bdde0b10f1c686","x":-380,"y":-280,"width":889,"height":420,"type":"text","text":"# Margin collapsing\n\n>[!def] top-bottom callapsing\n>In some cases the _bottom margin_ of the _upper block element_ and the _top margin_ of the _lower block element_ merges into a single margin with the value of the maximum.\n> $$ margin_{collapse} = \\max\\{ margin_1, margin_2\\} $$\n> Notice that the blocks are adjacent siblings.\n\nOther collapsing cases \n1. If _no content separating parent and descendants_, then we have top-top and bottom-bottom collapsing;\n2. For empty blocks, its top and bottom margin collapses. \n\n\n\n"},
		{"id":"6b9a4a34ba409dba","type":"text","text":"# Inline layout\n[CSS Ref: Inline Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_inline_layout)\n\n\n","x":-363,"y":4200,"width":923,"height":380},
		{"id":"54a8799caa4f6173","x":-363,"y":5260,"width":920,"height":1920,"type":"text","text":"# Grid \n\nGrid works from the layout in.\n\n|    concepts    | denotes                                                                                                                                                                                                                                                                                          |\n| :------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| grid container | the grid itself                                                                                                                                                                                                                                                                                  |\n|   grid item    | descendants to be placed in grid cells                                                                                                                                                                                                                                                           |\n|   grid track   | A _grid track_ is the space between any two adjacent lines on the grid.                                                                                                                                                                                                                          |\n|   grid line    | lines are just like cell borders in the concept of Excel; lines are numbered in write-mode direction which _start from $1$_ and _end with $-1$_                                                                                                                                                  |\n|   grid cell    | A _grid cell_ is the smallest unit on a grid. Conceptually it is like a table cell.                                                                                                                                                                                                              |\n|   grid area    | single or merged grid cells that contains a single grid item                                                                                                                                                                                                                                     |\n|     gutter     | gutters are spaces seperate grid areas                                                                                                                                                                                                                                                           |\n| implicit grid  | If you place something outside of the defined grid—or due to the amount of content, more grid tracks are needed—then the grid creates rows and columns in the implicit grid. These tracks will be auto-sized by default, resulting in their size being based on the content that is inside them. |\n## Grid definition\n\n| property                                     | on elem        | effect                                              |\n| -------------------------------------------- | -------------- | --------------------------------------------------- |\n| `grid-template-columns`/`grid-template-rows` | grid container | defines the num of columns and width of each column |\n| `grid-template-areas`                        | grid container | defines _named areas_                               |\n| `grid-auto-flow`                             | grid container | auto placement axis                                 |\n| `grid-auto-rows`/`grid-auto-columns`         | grid container | define the size of _implicit_ grid tracks           |\n| `column-gap` / `row-gap`                     | grid container |                                                     |\n\n- `fr` unit represents a fraction of the available space in the _grid container_;\n- `repeat(<track-number>, <track-size>)` used in `grid-template-*`, notice that track-number can be `auto-fill`;\n- `minmax(<min-size>, <max-size>)` used in `grid-template-*` and `grid-auto-*`;\n- `grid-template-columns: subgrid;` lets create nested grids that use the tracks of the parent grid;\n\n>[!rmk] auto-fill\n> `repeat(autofill, <track-size>)` will make a flexbox like behaviour.\n\n## Grid item placement\n\nplacement algorithm\n1. place grid items that have an explicit position;\n2. place other items with a `order` property\n3. place the rest items in DOM order.\n\n\n> When placing an item, we target the line – rather than the track.\n\nThe properties below take value in the set of grid line number.\n\n| properties                             | on elem   | effect |\n| -------------------------------------- | --------- | ------ |\n| `grid-column-start`, `grid-column-end` | grid item |        |\n| `grid-row-start`, `grid-row-end`       | grid item |        |\n- `grid-column : <start> / <end>`, or `grid-column : <start> / span <n-tracks>;\n- `grid-row : <start> / <end>`, or `grid-row: <start> / span <n-tracks>`;\n- `grid-area: <row-start> / <col-start> / <row-end> / <col-end>`\n\n\n## Alignment\n\nTwo axes available to align things against – the _block axis_ and the _inline axis_. The block axis is the axis upon which blocks are laid out in block layout.\n\n\n\n\n"},
		{"id":"b645d9c1d0bd446d","x":-363,"y":4720,"width":923,"height":422,"type":"text","text":"# Positioning\n\n| type            | flow/viewport       | positioning context  | extra effect                                                                             |\n| --------------- | ------------------- | -------------------- | ---------------------------------------------------------------------------------------- |\n| static(default) | normal flow         | No                   | default pos in normal flow                                                               |\n| relative        | normal flow         | new stacking context | assumes the space in the normal flow but actually shown with a offset to the default pos |\n| absolute        | positioning context | new stacking context |                                                                                          |\n\n- _inset properties_: `top`, `right`, `left`, `bottom`;\n- a _positioning context_ provides the coordination system for its _absolute positioned_ descendants;  \n"},
		{"id":"618bf904fe43804b","x":679,"y":5269,"width":921,"height":91,"type":"text","text":"# Trick: flip using `grid-template-area`\n\n"}
	],
	"edges":[
		{"id":"d801c066a0955f3e","fromNode":"d274cb0809a242c8","fromSide":"right","toNode":"fa149412f3d0138c","toSide":"left"},
		{"id":"2342ec5c8a56acc4","fromNode":"8df1f6ba922033a6","fromSide":"right","toNode":"0a6193bc62ab128c","toSide":"left"},
		{"id":"a1a69c8ceaa7293c","fromNode":"8df1f6ba922033a6","fromSide":"right","toNode":"d274cb0809a242c8","toSide":"left"},
		{"id":"65992e26084f41d8","fromNode":"0a6193bc62ab128c","fromSide":"right","toNode":"cba285bebc6c6800","toSide":"left"},
		{"id":"66d361b0cd8a3f99","fromNode":"0a6193bc62ab128c","fromSide":"right","toNode":"f00b9a23693f816e","toSide":"left"},
		{"id":"cb08fb1f5d8d14d1","fromNode":"93db746d2abdfdf7","fromSide":"right","toNode":"38f356ebf0831c7d","toSide":"left"},
		{"id":"1843d78745523aac","fromNode":"93db746d2abdfdf7","fromSide":"right","toNode":"5a319f3b30520d52","toSide":"left"},
		{"id":"c1ed3fbc8fd0325d","fromNode":"8df1f6ba922033a6","fromSide":"right","toNode":"93db746d2abdfdf7","toSide":"left"},
		{"id":"a4dcff6f0775dc10","fromNode":"8df1f6ba922033a6","fromSide":"right","toNode":"34e0943142095c0e","toSide":"left"},
		{"id":"f6fcd179b4bfa92b","fromNode":"34e0943142095c0e","fromSide":"right","toNode":"e540a5b164b56245","toSide":"left"},
		{"id":"32d50dd669845b21","fromNode":"a8beaee388366639","fromSide":"right","toNode":"b50f2c351cdc4146","toSide":"left"}
	]
}