% Encoding: UTF-8

@InProceedings{bohme2017directed,
  author     = {B{\"o}hme, Marcel and Pham, Van-Thuan and Nguyen, Manh-Dung and Roychoudhury, Abhik},
  booktitle  = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  title      = {Directed Greybox Fuzzing},
  year       = {2017},
  pages      = {2329--2344},
  doi        = {10.1145/3133956.3134020},
  file       = {:C\:/Users/ys-zh/iCloudDrive/Papers/IS/fuzz/Directed Greybox Fuzzing.pdf:PDF},
  groups     = {Fuzzing},
  readstatus = {read},
}

@Article{8233151,
  author     = {Böhme, Marcel and Pham, Van-Thuan and Roychoudhury, Abhik},
  journal    = {IEEE Transactions on Software Engineering},
  title      = {Coverage-Based Greybox Fuzzing as Markov Chain},
  year       = {2019},
  issn       = {0098-5589},
  number     = {5},
  pages      = {489-506},
  volume     = {45},
  doi        = {10.1109/TSE.2017.2785841},
  file       = {:C\:/Users/ys-zh/iCloudDrive/Papers/IS/fuzz/Coverage-Based_Greybox_Fuzzing_as_Markov_Chain.pdf:PDF},
  groups     = {Fuzzing},
  readstatus = {read},
}

@InProceedings{10.1145/3318464.3389745,
  author    = {Fan, Wenfei and Jin, Ruochun and Liu, Muyang and Lu, Ping and Luo, Xiaojian and Xu, Ruiqi and Yin, Qiang and Yu, Wenyuan and Zhou, Jingren},
  booktitle = {Proceedings of the 2020 ACM SIGMOD International Conference on Management of Data},
  title     = {Application Driven Graph Partitioning},
  year      = {2020},
  address   = {New York, NY, USA},
  pages     = {1765–1779},
  publisher = {Association for Computing Machinery},
  series    = {SIGMOD '20},
  abstract  = {Graph partitioning is crucial to parallel computations on large graphs. The choice
of partitioning strategies has strong impact on not only the performance of graph
algorithms, but also the design of the algorithms. For an algorithm of our interest,
what partitioning strategy fits it the best and improves its parallel execution? Is
it possible to develop graph algorithms with partition transparency, such that the
algorithms work under different partitions without changes? This paper aims to answer
these questions. We propose an application-driven hybrid partitioning strategy that,
given a graph algorithm A, learns a cost model for A as polynomial regression. We
develop partitioners that given the learned cost model, refine an edge-cut or vertex-cut
partition to a hybrid partition and reduce the parallel cost of A. Moreover, we identify
a general condition under which graph-centric algorithms are partition transparent.
We show that a number of graph algorithms can be made partition transparent. Using
real-life and synthetic graphs, we experimentally verify that our partitioning strategy
improves the performance of a variety of graph computations, up to 22.5 times.},
  doi       = {10.1145/3318464.3389745},
  file      = {paper:C\:/Users/ys-zh/iCloudDrive/Papers/GraphTheory/Application Driven Graph Partitioning.pdf:PDF},
  groups    = {Graph Theory},
  isbn      = {9781450367356},
  keywords  = {partition transparency, machine learning, graph partition},
  location  = {Portland, OR, USA},
  numpages  = {15},
  priority  = {prio3},
  url       = {https://doi.org/10.1145/3318464.3389745},
}

@InProceedings{10.1145/3377811.3380421,
  author    = {Man\`{e}s, Valentin J. M. and Kim, Soomin and Cha, Sang Kil},
  booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
  title     = {Ankou: Guiding Grey-Box Fuzzing towards Combinatorial Difference},
  year      = {2020},
  address   = {New York, NY, USA},
  pages     = {1024–1036},
  publisher = {Association for Computing Machinery},
  series    = {ICSE '20},
  abstract  = {Grey-box fuzzing is an evolutionary process, which maintains and evolves a population
of test cases with the help of a fitness function. Fitness functions used by current
grey-box fuzzers are not informative in that they cannot distinguish different program
executions as long as those executions achieve the same coverage. The problem is that
current fitness functions only consider a union of data, but not their combination.
As such, fuzzers often get stuck in a local optimum during their search. In this paper,
we introduce Ankou, the first grey-box fuzzer that recognizes different combinations
of execution information, and present several scalability challenges encountered while
designing and implementing Ankou. Our experimental results show that Ankou is 1.94\texttimes{}
and 8.0\texttimes{} more effective in finding bugs than AFL and Angora, respectively.},
  doi       = {10.1145/3377811.3380421},
  groups    = {Fuzzing},
  isbn      = {9781450371216},
  keywords  = {guided fuzzing, principal component analysis, fuzz testing, software testing, grey-box fuzzing},
  location  = {Seoul, South Korea},
  numpages  = {13},
  priority  = {prio3},
  url       = {https://doi.org/10.1145/3377811.3380421},
}

@InProceedings{10.1145/2001576.2001642,
  author    = {Kim, Jin and Hwang, Inwook and Kim, Yong-Hyuk and Moon, Byung-Ro},
  booktitle = {Proceedings of the 13th Annual Conference on Genetic and Evolutionary Computation},
  title     = {Genetic Approaches for Graph Partitioning: A Survey},
  year      = {2011},
  address   = {New York, NY, USA},
  pages     = {473–480},
  publisher = {Association for Computing Machinery},
  series    = {GECCO '11},
  abstract  = {The graph partitioning problem occurs in numerous applications such as circuit placement,
matrix factorization, load balancing, and community detection. For this problem, genetic
algorithm is a representative approach with competitive performance with many related
papers being published. Although there are a number of surveys on graph partitioning,
none of them deals with genetic algorithms in much detail. In this survey, a number
of problem-specific issues in applying genetic algorithms to the graph partitioning
problem are discussed; the issues include encoding, crossover, normalization, and
balancing.},
  doi       = {10.1145/2001576.2001642},
  file      = {paper:C\:/Users/ys-zh/iCloudDrive/Papers/GraphTheory/Genetic Approaches for Graph Partitioning--A Survey.pdf:PDF},
  groups    = {Graph Theory},
  isbn      = {9781450305570},
  keywords  = {genetic algorithm, survey, combinatorial optimization, graph partitioning, graph bisection},
  location  = {Dublin, Ireland},
  numpages  = {8},
  url       = {https://doi.org/10.1145/2001576.2001642},
}

@Misc{rajpal2017bytes,
  author        = {Mohit Rajpal and William Blum and Rishabh Singh},
  title         = {Not all bytes are equal: Neural byte sieve for fuzzing},
  year          = {2017},
  archiveprefix = {arXiv},
  eprint        = {1711.04596},
  file          = {paper:C\:/Users/ys-zh/iCloudDrive/Papers/IS/fuzz/1711.04596.pdf:PDF},
  groups        = {Fuzzing},
  primaryclass  = {cs.SE},
}

@Article{Godefroid_2017,
  author    = {Godefroid, Patrice and Peleg, Hila and Singh, Rishabh},
  journal   = {2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  title     = {Learn&Fuzz: Machine learning for input fuzzing},
  year      = {2017},
  month     = {Oct},
  doi       = {10.1109/ase.2017.8115618},
  file      = {paper:C\:/Users/ys-zh/iCloudDrive/Papers/IS/fuzz/Learn&Fuzz-ML4input-fuzz.pdf:PDF},
  groups    = {Fuzzing},
  isbn      = {9781538626849},
  priority  = {prio1},
  publisher = {IEEE},
  url       = {http://dx.doi.org/10.1109/ASE.2017.8115618},
}

@InProceedings{zong2020fuzzguard,
  author     = {Zong, Peiyuan and Lv, Tao and Wang, Dawei and Deng, Zizhuang and Liang, Ruigang and Chen, Kai},
  booktitle  = {29th $\{$USENIX$\}$ Security Symposium ($\{$USENIX$\}$ Security 20)},
  title      = {Fuzzguard: Filtering out unreachable inputs in directed grey-box fuzzing through deep learning},
  year       = {2020},
  pages      = {2255--2269},
  file       = {paper:C\:/Users/ys-zh/iCloudDrive/Papers/IS/fuzz/FuzzGuard.pdf:PDF},
  groups     = {Fuzzing},
  priority   = {prio1},
  readstatus = {skimmed},
}

@Article{Chen_2018,
  author    = {Chen, Peng and Chen, Hao},
  journal   = {2018 IEEE Symposium on Security and Privacy (SP)},
  title     = {Angora: Efficient Fuzzing by Principled Search},
  year      = {2018},
  month     = {May},
  comment   = {Angora [15] and NEUZZ [31] adapt the gradient descent algorithm to solve path constraint
and learn a model to improve code coverage respectively.},
  doi       = {10.1109/sp.2018.00046},
  file      = {:C\:/Users/ys-zh/iCloudDrive/Papers/IS/fuzz/1803.01307.pdf:PDF},
  groups    = {Fuzzing},
  isbn      = {9781538643532},
  publisher = {IEEE},
  url       = {http://dx.doi.org/10.1109/SP.2018.00046},
}

@Article{Azarnova_2019,
  author    = {T V Azarnova and P V Polukhin},
  journal   = {{IOP} Conference Series: Materials Science and Engineering},
  title     = {Advanced hybrid stochastic dynamic Bayesian network inference algorithm development in the context of the web applications test execution},
  year      = {2019},
  month     = {jun},
  pages     = {052028},
  volume    = {537},
  abstract  = {The article is devoted to the application of dynamic Bayesian networks models for fuzzing web applications and development of effective hybrid algorithms for probabilistic inference based on particle filter algorithm. Dynamic Bayesian networks models allow to simulate the dynamic process transformation of web applications associated with the process of their constant instrumental and logical updates, and create a probabilistic structure required for learning process of testing the top web applications vulnerabilities, that able to use the evidence and inference results obtained in the retrospective and current testing slices and improve testing mechanisms in new time slices. The hybrid probabilistic inference algorithm for dynamic Bayesian networks models for testing web-applications, proposed in the current research, significantly increase the efficiency of the classical approximate probabilistic inference algorithms, well reflect the features of the temporary testing links formation and adapted to the detection of anomalous errors.},
  comment   = {not interesting},
  doi       = {10.1088/1757-899x/537/5/052028},
  file      = {paper:C\:/Users/ys-zh/iCloudDrive/Papers/IS/fuzz/Azarnova_2019_IOP_Conf._Ser.__Mater._Sci._Eng._537_052028.pdf:PDF},
  groups    = {Fuzzing},
  publisher = {{IOP} Publishing},
  url       = {https://doi.org/10.1088/1757-899x/537/5/052028},
}

@Misc{nichols2017faster,
  author        = {Nicole Nichols and Mark Raugas and Robert Jasper and Nathan Hilliard},
  title         = {Faster Fuzzing: Reinitialization with Deep Neural Models},
  year          = {2017},
  archiveprefix = {arXiv},
  eprint        = {1711.02807},
  file          = {paper:C\:/Users/ys-zh/iCloudDrive/Papers/IS/fuzz/1711.02807.pdf:PDF},
  groups        = {Fuzzing},
  primaryclass  = {cs.AI},
}

@InBook{dc1d11105c1a4b059b545c859130c4bf,
  author    = {Sanjay Rawat and Vivek Jain and Ashish Kumar and Lucian Cojocar and Cristiano Giuffrida and Herbert Bos},
  title     = {VUzzer : Application - aware Evolutionary Fuzzing},
  year      = {2017},
  isbn      = {1891562460},
  series    = {NDSS'17},
  abstract  = {See, stats, and : https : / / www . researchgate . net / publication / 311886374 VUzzer : Application - aware Conference DOI : 10 . 14722 / ndss . 2017 . 23404 CITATIONS 0 READS 17 6 , including : Some : Systems Sanjay Vrije , Amsterdam , Netherlands 38 SEE Ashish International 1 SEE Cristiano VU 51 SEE Herbert VU 163 , 836 SEE All . The . All - text and , letting . Abstract—Fuzzing is an effective software testing technique to find bugs . Given the size and complexity of real - world applications , modern fuzzers tend to be either scalable , but not effective in exploring bugs that lie deeper in the execution , or capable of penetrating deeper in the application , but not scalable . In this paper , we present an application - aware evolutionary fuzzing strategy that does not require any prior knowledge of the application or input format . In order to maximize coverage and explore deeper paths , we leverage control - and data - flow features based on static and dynamic analysis to infer fundamental prop - erties of the application . This enables much faster generation of interesting inputs compared to an application - agnostic approach . We implement our fuzzing strategy in VUzzer and evaluate it on three different datasets : DARPA Grand Challenge binaries (CGC) , a set of real - world applications (binary input parsers) , and the recently released LAVA dataset . On all of these datasets , VUzzer yields significantly better results than state - of - the - art fuzzers , by quickly finding several existing and new bugs .},
  booktitle = {NDSS'17},
  doi       = {10.14722/ndss.2017.23404},
  file      = {paper:C\:/Users/ys-zh/iCloudDrive/Papers/IS/fuzz/vuzzer-ndss-2017.pdf:PDF},
  groups    = {Fuzzing},
  language  = {English},
}

@Article{She_2019,
  author    = {She, Dongdong and Pei, Kexin and Epstein, Dave and Yang, Junfeng and Ray, Baishakhi and Jana, Suman},
  journal   = {2019 IEEE Symposium on Security and Privacy (SP)},
  title     = {NEUZZ: Efficient Fuzzing with Neural Program Smoothing},
  year      = {2019},
  month     = {May},
  doi       = {10.1109/sp.2019.00052},
  file      = {paper:C\:/Users/ys-zh/iCloudDrive/Papers/IS/fuzz/1807.05620v1.pdf:PDF},
  groups    = {Fuzzing},
  isbn      = {9781538666609},
  publisher = {IEEE},
  url       = {http://dx.doi.org/10.1109/SP.2019.00052},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: grouping:
0 AllEntriesGroup:;
1 StaticGroup:Fuzzing\;0\;0\;0x4d8080ff\;bug\;\;;
1 StaticGroup:Graph Theory\;0\;0\;0x008000ff\;graph\;\;;
}
