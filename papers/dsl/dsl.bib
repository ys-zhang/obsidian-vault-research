%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for ys zhang at 2022-01-11 11:48:05 +1100 


%% Saved with string encoding Unicode (UTF-8) 



@article{ulitin2019ontology,
	author = {Ulitin, Boris and Babkin, Eduard},
	date-added = {2022-01-11 11:38:45 +1100},
	date-modified = {2022-01-11 11:39:03 +1100},
	journal = {IFAC-PapersOnLine},
	keywords = {Ontology, DSL},
	number = {13},
	pages = {1138--1144},
	publisher = {Elsevier},
	title = {Ontology-based reconfigurable DSL for planning technical services},
	volume = {52},
	year = {2019}}

@article{rocco2020introduction,
	author = {Rocco, Claudio M and Hernandez-Perdomo, Elvis and Mun, Johnathan},
	date-added = {2022-01-10 22:19:44 +1100},
	date-modified = {2022-01-10 22:22:17 +1100},
	journal = {Reliability Engineering \& System Safety},
	keywords = {Formal Concept Analysis, Reliability Engineering},
	pages = {107002},
	publisher = {Elsevier},
	rating = {1},
	title = {Introduction to formal concept analysis and its applications in reliability engineering},
	volume = {202},
	year = {2020},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBcSW50cm9kdWN0aW9uIHRvIGZvcm1hbCBjb25jZXB0IGFuYWx5c2lzIGFuZCBpdHMgYXBwbGljYXRpb25zIGluIHJlbGlhYmlsaXR5IGVuZ2luZWVyaW5nIC5wZGZPEQKQAAAAAAKQAAIAAAREYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8fSW50cm9kdWN0aW9uIHRvIGZvI0ZGRkZGRkZGLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAIAAAogY3UAAAAAAAAAAAAAAAAAA2RzbAAAAgCHLzpVc2Vyczp5c3poYW5nOkRvY3VtZW50czpub3RlczpwYXBlcnM6ZHNsOkludHJvZHVjdGlvbiB0byBmb3JtYWwgY29uY2VwdCBhbmFseXNpcyBhbmQgaXRzIGFwcGxpY2F0aW9ucyBpbiByZWxpYWJpbGl0eSBlbmdpbmVlcmluZyAucGRmAAAOALoAXABJAG4AdAByAG8AZAB1AGMAdABpAG8AbgAgAHQAbwAgAGYAbwByAG0AYQBsACAAYwBvAG4AYwBlAHAAdAAgAGEAbgBhAGwAeQBzAGkAcwAgAGEAbgBkACAAaQB0AHMAIABhAHAAcABsAGkAYwBhAHQAaQBvAG4AcwAgAGkAbgAgAHIAZQBsAGkAYQBiAGkAbABpAHQAeQAgAGUAbgBnAGkAbgBlAGUAcgBpAG4AZwAgAC4AcABkAGYADwAKAAQARABhAHQAYQASAIVVc2Vycy95c3poYW5nL0RvY3VtZW50cy9ub3Rlcy9wYXBlcnMvZHNsL0ludHJvZHVjdGlvbiB0byBmb3JtYWwgY29uY2VwdCBhbmFseXNpcyBhbmQgaXRzIGFwcGxpY2F0aW9ucyBpbiByZWxpYWJpbGl0eSBlbmdpbmVlcmluZyAucGRmAAATAAEvAAAVAAIADv//AAAACAANABoAJACDAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAxc=}}

@article{belohlavek2008introduction,
	author = {Belohlavek, Radim},
	date-added = {2022-01-10 22:12:08 +1100},
	date-modified = {2022-01-10 22:13:55 +1100},
	journal = {Palacky University, Department of Computer Science, Olomouc},
	keywords = {Conceptual Modeling, Formal Concept Analysis},
	title = {Introduction to formal concept analysis},
	volume = {47},
	year = {2008},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAkaW50cm8gdG8gZm9ybWFsIGNvbmNlcHQgYW5hbHlzaXMucGRmTxEBsAAAAAABsAACAAAERGF0YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////H2ludHJvIHRvIGZvcm1hbCBjbyNGRkZGRkZGRi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAQACAAAKIGN1AAAAAAAAAAAAAAAAAANkc2wAAAIATy86VXNlcnM6eXN6aGFuZzpEb2N1bWVudHM6bm90ZXM6cGFwZXJzOmRzbDppbnRybyB0byBmb3JtYWwgY29uY2VwdCBhbmFseXNpcy5wZGYAAA4ASgAkAGkAbgB0AHIAbwAgAHQAbwAgAGYAbwByAG0AYQBsACAAYwBvAG4AYwBlAHAAdAAgAGEAbgBhAGwAeQBzAGkAcwAuAHAAZABmAA8ACgAEAEQAYQB0AGEAEgBNVXNlcnMveXN6aGFuZy9Eb2N1bWVudHMvbm90ZXMvcGFwZXJzL2RzbC9pbnRybyB0byBmb3JtYWwgY29uY2VwdCBhbmFseXNpcy5wZGYAABMAAS8AABUAAgAO//8AAAAIAA0AGgAkAEsAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAAB/w==}}

@inproceedings{dapoigny2013modeling,
	author = {Dapoigny, Richard and Barlatier, Patrick},
	booktitle = {International Conference on Conceptual Structures},
	date-added = {2022-01-10 21:59:44 +1100},
	date-modified = {2022-01-11 11:35:37 +1100},
	keywords = {Coq, Conceptual Modeling, Ontology},
	organization = {Springer},
	pages = {135--152},
	title = {Modeling ontological structures with type classes in coq},
	year = {2013},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAVQ29xL3ByZXNlbnRJQ0NTMTMucGRmTxEBagAAAAABagACAAAERGF0YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////EXByZXNlbnRJQ0NTMTMucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAQADAAAKIGN1AAAAAAAAAAAAAAAAAANDb3EAAAIAQC86VXNlcnM6eXN6aGFuZzpEb2N1bWVudHM6bm90ZXM6cGFwZXJzOmRzbDpDb3E6cHJlc2VudElDQ1MxMy5wZGYADgAkABEAcAByAGUAcwBlAG4AdABJAEMAQwBTADEAMwAuAHAAZABmAA8ACgAEAEQAYQB0AGEAEgA+VXNlcnMveXN6aGFuZy9Eb2N1bWVudHMvbm90ZXMvcGFwZXJzL2RzbC9Db3EvcHJlc2VudElDQ1MxMy5wZGYAEwABLwAAFQACAA7//wAAAAgADQAaACQAPAAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAGq},
	bdsk-file-2 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAwQ29xLzIwMTNfQm9va19Db25jZXB0dWFsU3RydWN0dXJlc0ZvclNURU1SZXMucGRmTxEB2AAAAAAB2AACAAAERGF0YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////HzIwMTNfQm9va19Db25jZXB0dSNGRkZGRkZGRi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAQADAAAKIGN1AAAAAAAAAAAAAAAAAANDb3EAAAIAWy86VXNlcnM6eXN6aGFuZzpEb2N1bWVudHM6bm90ZXM6cGFwZXJzOmRzbDpDb3E6MjAxM19Cb29rX0NvbmNlcHR1YWxTdHJ1Y3R1cmVzRm9yU1RFTVJlcy5wZGYAAA4AWgAsADIAMAAxADMAXwBCAG8AbwBrAF8AQwBvAG4AYwBlAHAAdAB1AGEAbABTAHQAcgB1AGMAdAB1AHIAZQBzAEYAbwByAFMAVABFAE0AUgBlAHMALgBwAGQAZgAPAAoABABEAGEAdABhABIAWVVzZXJzL3lzemhhbmcvRG9jdW1lbnRzL25vdGVzL3BhcGVycy9kc2wvQ29xLzIwMTNfQm9va19Db25jZXB0dWFsU3RydWN0dXJlc0ZvclNURU1SZXMucGRmAAATAAEvAAAVAAIADv//AAAACAANABoAJABXAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAjM=}}

@article{10.1145/358438.349331,
	abstract = {Functional Reactive Programming, or FRP, is a general framework for programming hybrid systems in a high-level, declarative manner. The key ideas in FRP are its notions of behaviors and events. Behaviors are time-varying, reactive values, while events are time-ordered sequences of discrete-time event occurrences. FRP is the essence of Fran, a domain-specific language embedded in Haskell for programming reactive animations, but FRP is now also being used in vision, robotics and other control systems applications. In this paper we explore the formal semantics of FRP and how it relates to an implementation based on streams that represent (and therefore only approximate) continuous behaviors. We show that, in the limit as the sampling interval goes to zero, the implementation is faithful to the formal, continuous semantics, but only when certain constraints on behaviors are observed. We explore the nature of these constraints, which vary amongst the FRP primitives. Our results show both the power and limitations of this approach to language design and implementation. As an example of a limitation, we show that streams are incapable of representing instantaneous predicate events over behaviors.},
	address = {New York, NY, USA},
	author = {Wan, Zhanyong and Hudak, Paul},
	date-added = {2022-01-01 22:11:04 +1100},
	date-modified = {2022-01-01 22:12:23 +1100},
	doi = {10.1145/358438.349331},
	issn = {0362-1340},
	issue_date = {May 2000},
	journal = {SIGPLAN Not.},
	keywords = {Functional Reactive Programming},
	month = {may},
	number = {5},
	numpages = {11},
	pages = {242--252},
	publisher = {Association for Computing Machinery},
	title = {Functional Reactive Programming from First Principles},
	url = {https://doi.org/10.1145/358438.349331},
	volume = {35},
	year = {2000},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA5RnVuY3Rpb25hbCBSZWFjdGl2ZSBQcm9ncmFtbWluZyBmcm9tIEZpcnN0IFByaW5jaXBsZXMucGRmTxECAgAAAAACAgACAAAERGF0YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////H0Z1bmN0aW9uYWwgUmVhY3RpdiNGRkZGRkZGRi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAQACAAAKIGN1AAAAAAAAAAAAAAAAAANkc2wAAAIAZC86VXNlcnM6eXN6aGFuZzpEb2N1bWVudHM6bm90ZXM6cGFwZXJzOmRzbDpGdW5jdGlvbmFsIFJlYWN0aXZlIFByb2dyYW1taW5nIGZyb20gRmlyc3QgUHJpbmNpcGxlcy5wZGYADgB0ADkARgB1AG4AYwB0AGkAbwBuAGEAbAAgAFIAZQBhAGMAdABpAHYAZQAgAFAAcgBvAGcAcgBhAG0AbQBpAG4AZwAgAGYAcgBvAG0AIABGAGkAcgBzAHQAIABQAHIAaQBuAGMAaQBwAGwAZQBzAC4AcABkAGYADwAKAAQARABhAHQAYQASAGJVc2Vycy95c3poYW5nL0RvY3VtZW50cy9ub3Rlcy9wYXBlcnMvZHNsL0Z1bmN0aW9uYWwgUmVhY3RpdmUgUHJvZ3JhbW1pbmcgZnJvbSBGaXJzdCBQcmluY2lwbGVzLnBkZgATAAEvAAAVAAIADv//AAAACAANABoAJABgAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAmY=},
	bdsk-url-1 = {https://doi.org/10.1145/358438.349331}}

@article{10.1145/2858949.2784752,
	abstract = { We present a new interface for practical Functional Reactive Programming (FRP) that (1) is close in spirit to the original FRP ideas, (2) does not have the original space-leak problems, without using arrows or advanced types, and (3) provides a simple and expressive way for performing IO actions from FRP code. We also provide a denotational semantics for this new interface, and a technique (using Kripke logical relations) for reasoning about which FRP functions may "forget their past", i.e. which functions do not have an inherent space-leak. Finally, we show how we have implemented this interface as a Haskell library called FRPNow. },
	address = {New York, NY, USA},
	author = {Ploeg, Atze van der and Claessen, Koen},
	date-added = {2022-01-01 21:52:45 +1100},
	date-modified = {2022-01-11 11:41:52 +1100},
	doi = {10.1145/2858949.2784752},
	issn = {0362-1340},
	issue_date = {September 2015},
	journal = {SIGPLAN Not.},
	keywords = {Kripke Logical Relations, Functional Reactive Programming},
	month = {aug},
	number = {9},
	numpages = {13},
	pages = {302--314},
	publisher = {Association for Computing Machinery},
	title = {Practical Principled FRP: Forget the Past, Change the Future, FRPNow!},
	url = {https://doi.org/10.1145/2858949.2784752},
	volume = {50},
	year = {2015},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAcUHJhY3RpY2FsIFByaW5jaXBsZWQgRlJQLnBkZk8RAZAAAAAAAZAAAgAABERhdGEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////xxQcmFjdGljYWwgUHJpbmNpcGxlZCBGUlAucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAEAAgAACiBjdQAAAAAAAAAAAAAAAAADZHNsAAACAEcvOlVzZXJzOnlzemhhbmc6RG9jdW1lbnRzOm5vdGVzOnBhcGVyczpkc2w6UHJhY3RpY2FsIFByaW5jaXBsZWQgRlJQLnBkZgAADgA6ABwAUAByAGEAYwB0AGkAYwBhAGwAIABQAHIAaQBuAGMAaQBwAGwAZQBkACAARgBSAFAALgBwAGQAZgAPAAoABABEAGEAdABhABIARVVzZXJzL3lzemhhbmcvRG9jdW1lbnRzL25vdGVzL3BhcGVycy9kc2wvUHJhY3RpY2FsIFByaW5jaXBsZWQgRlJQLnBkZgAAEwABLwAAFQACAA7//wAAAAgADQAaACQAQwAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAHX},
	bdsk-url-1 = {https://doi.org/10.1145/2858949.2784752}}

@article{wang2005knowledge,
	author = {Wang, Jiachuan and Fan, Zhun and Terpenny, Janis P and Goodman, Erik D},
	date-added = {2021-12-29 13:45:22 +1100},
	date-modified = {2022-01-11 11:40:20 +1100},
	journal = {IEEE Transactions on Systems, Man, and Cybernetics, Part C (Applications and Reviews)},
	keywords = {MDA},
	number = {2},
	pages = {172--182},
	publisher = {IEEE},
	rating = {4},
	title = {Knowledge interaction with genetic programming in mechatronic systems design using bond graphs},
	volume = {35},
	year = {2005},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAUMjAxODEwMjkyMDUyMjg4NC5wZGZPEQFwAAAAAAFwAAIAAAREYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8UMjAxODEwMjkyMDUyMjg4NC5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAIAAAogY3UAAAAAAAAAAAAAAAAAA2RzbAAAAgA/LzpVc2Vyczp5c3poYW5nOkRvY3VtZW50czpub3RlczpwYXBlcnM6ZHNsOjIwMTgxMDI5MjA1MjI4ODQucGRmAAAOACoAFAAyADAAMQA4ADEAMAAyADkAMgAwADUAMgAyADgAOAA0AC4AcABkAGYADwAKAAQARABhAHQAYQASAD1Vc2Vycy95c3poYW5nL0RvY3VtZW50cy9ub3Rlcy9wYXBlcnMvZHNsLzIwMTgxMDI5MjA1MjI4ODQucGRmAAATAAEvAAAVAAIADv//AAAACAANABoAJAA7AAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAa8=}}

@inproceedings{10.1145/3328519.3329132,
	abstract = {In this paper we introduce knowledge graph programming, a new method for writing extremely succinct programs. This method allows programmers to save work by writing programs that are brief but also underspecified and underconstrained; a human-in-the-loop "data compiler" then automatically fills in missing values without the programmer's explicit help. It uses modern data quality mechanisms such as information extraction, data integration, and crowdsourcing. The language encourages users to mention knowledge graph entities in their programs, thus enabling the data compiler to exploit the extensive factual and type structure present in modern KGs. We describe the knowledge graph programming user experience, explain its conceptual steps and data model, describe our prototype KGP system, and present some preliminary experimental results.},
	address = {New York, NY, USA},
	articleno = {7},
	author = {Lou, Yuze and Uddin, Mahfus and Brown, Nathaniel and Cafarella, Michael},
	booktitle = {Proceedings of the Workshop on Human-In-the-Loop Data Analytics},
	date-added = {2021-12-28 21:44:16 +1100},
	date-modified = {2021-12-29 13:34:05 +1100},
	doi = {10.1145/3328519.3329132},
	isbn = {9781450367912},
	keywords = {Knowledge graph, Knowledge graph programming, KGP},
	location = {Amsterdam, Netherlands},
	numpages = {7},
	publisher = {Association for Computing Machinery},
	rating = {4},
	series = {HILDA'19},
	title = {Knowledge Graph Programming with a Human-in-the-Loop: Preliminary Results},
	url = {https://doi.org/10.1145/3328519.3329132},
	year = {2019},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBNS25vd2xlZGdlIEdyYXBoIFByb2dyYW1taW5nIHdpdGggYSBIdW1hbi1pbi10aGUtTG9vcC0gUHJlbGltaW5hcnkgUmVzdWx0cy5wZGZPEQJSAAAAAAJSAAIAAAREYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8fS25vd2xlZGdlIEdyYXBoIFByI0ZGRkZGRkZGLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAIAAAogY3UAAAAAAAAAAAAAAAAAA2RzbAAAAgB4LzpVc2Vyczp5c3poYW5nOkRvY3VtZW50czpub3RlczpwYXBlcnM6ZHNsOktub3dsZWRnZSBHcmFwaCBQcm9ncmFtbWluZyB3aXRoIGEgSHVtYW4taW4tdGhlLUxvb3AtIFByZWxpbWluYXJ5IFJlc3VsdHMucGRmAA4AnABNAEsAbgBvAHcAbABlAGQAZwBlACAARwByAGEAcABoACAAUAByAG8AZwByAGEAbQBtAGkAbgBnACAAdwBpAHQAaAAgAGEAIABIAHUAbQBhAG4ALQBpAG4ALQB0AGgAZQAtAEwAbwBvAHAALQAgAFAAcgBlAGwAaQBtAGkAbgBhAHIAeQAgAFIAZQBzAHUAbAB0AHMALgBwAGQAZgAPAAoABABEAGEAdABhABIAdlVzZXJzL3lzemhhbmcvRG9jdW1lbnRzL25vdGVzL3BhcGVycy9kc2wvS25vd2xlZGdlIEdyYXBoIFByb2dyYW1taW5nIHdpdGggYSBIdW1hbi1pbi10aGUtTG9vcC0gUHJlbGltaW5hcnkgUmVzdWx0cy5wZGYAEwABLwAAFQACAA7//wAAAAgADQAaACQAdAAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAALK},
	bdsk-url-1 = {https://doi.org/10.1145/3328519.3329132}}

@inproceedings{10.1007/978-3-642-23798-0_33,
	abstract = {Software architects create and consume many interrelated artifacts during the architecting process. These artifacts may represent functional and nonfunctional requirements, architectural patterns, infrastructure topology units, code, and deployment descriptors as well as architecturally significant design decisions. Design decisions have to be linked to chunks of architecture description in order to achieve a fine-grained control when a design is modified. Moreover, it is imperative to identify quickly the key decisions affected by a runtime change that are critical for a system's mission. This paper extends previous work on architectural knowledge with a metamodel for architectural decision capturing and sharing to: (i) create and maintain fine-grained dependency links between the entities during decision identification, making, and enforcement, (ii) keep track of the evolution of the decisions, and (iii) support runtime decisions.},
	address = {Berlin, Heidelberg},
	author = {Capilla, Rafael and Zimmermann, Olaf and Zdun, Uwe and Avgeriou, Paris and K{\"u}ster, Jochen M.},
	booktitle = {Software Architecture},
	date-added = {2021-12-28 21:36:26 +1100},
	date-modified = {2021-12-28 21:37:29 +1100},
	editor = {Crnkovic, Ivica and Gruhn, Volker and Book, Matthias},
	isbn = {978-3-642-23798-0},
	keywords = {Requirement, Knowledge management},
	pages = {303--318},
	publisher = {Springer Berlin Heidelberg},
	rating = {4},
	title = {An Enhanced Architectural Knowledge Metamodel Linking Architectural Design Decisions to other Artifacts in the Software Engineering Lifecycle},
	year = {2011},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXDY5MDMwMzAzLnBkZk8RAVAAAAAAAVAAAgAABERhdGEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////ww2OTAzMDMwMy5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAEAAgAACiBjdQAAAAAAAAAAAAAAAAADZHNsAAACADcvOlVzZXJzOnlzemhhbmc6RG9jdW1lbnRzOm5vdGVzOnBhcGVyczpkc2w6NjkwMzAzMDMucGRmAAAOABoADAA2ADkAMAAzADAAMwAwADMALgBwAGQAZgAPAAoABABEAGEAdABhABIANVVzZXJzL3lzemhhbmcvRG9jdW1lbnRzL25vdGVzL3BhcGVycy9kc2wvNjkwMzAzMDMucGRmAAATAAEvAAAVAAIADv//AAAACAANABoAJAAxAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAYU=}}

@article{ZIMMERMANN20122014,
	abstract = {Capturing and sharing design knowledge such as architectural decisions is becoming increasingly important in firms providing professional Information Technology (IT) services such as enterprise application development and strategic outsourcing. Methods, models, and tools supporting explicit knowledge management strategies have been proposed in recent years; however, several challenges remain unaddressed. In this paper, we extend our previous work to overcome these challenges and to satisfy the requirements of an additional user group, presales architects that are responsible for IT service solution proposals. In strategic outsourcing, such solution proposals require complex, contractually relevant design decisions concerning many different resources such as IT infrastructures, people, and real estate. To support both presales and project architects, we define a common reference architecture and a decision process-oriented metamodel. We also present a tool implementation of these concepts and discuss their application to outsourcing proposals and application development projects. Finally, we establish twelve decision modeling principles and practices that capture the practical experience gained and lessons learned during the application of our decision modeling concepts to both proposal development and architecture design work on projects.},
	author = {Olaf Zimmermann and Christoph Miksovic and Jochen M. K{\"u}ster},
	date-added = {2021-12-28 21:22:09 +1100},
	date-modified = {2022-01-11 11:42:59 +1100},
	doi = {https://doi.org/10.1016/j.jss.2012.05.003},
	issn = {0164-1212},
	journal = {Journal of Systems and Software},
	keywords = { DSL, Knowledge management, MDE},
	note = {Selected papers from the 2011 Joint Working IEEE/IFIP Conference on Software Architecture (WICSA 2011)},
	number = {9},
	pages = {2014-2033},
	title = {Reference architecture, metamodel, and modeling principles for architectural knowledge management in information technology services},
	url = {https://www.sciencedirect.com/science/article/pii/S0164121212001343},
	volume = {85},
	year = {2012},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxCIUmVmZXJlbmNlIGFyY2hpdGVjdHVyZSwgbWV0YW1vZGVsLCBhbmQgbW9kZWxpbmcgcHJpbmNpcGxlcyBmb3IgYXJjaGl0ZWN0dXJhbCBrbm93bGVkZ2UgbWFuYWdlbWVudCBpbiBpbmZvcm1hdGlvbiB0ZWNobm9sb2d5IHNlcnZpY2VzLnBkZk8RA0AAAAAAA0AAAgAABERhdGEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////x9SZWZlcmVuY2UgYXJjaGl0ZWMjRkZGRkZGRkYucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAEAAgAACiBjdQAAAAAAAAAAAAAAAAADZHNsAAACALMvOlVzZXJzOnlzemhhbmc6RG9jdW1lbnRzOm5vdGVzOnBhcGVyczpkc2w6UmVmZXJlbmNlIGFyY2hpdGVjdHVyZSwgbWV0YW1vZGVsLCBhbmQgbW9kZWxpbmcgcHJpbmNpcGxlcyBmb3IgYXJjaGl0ZWN0dXJhbCBrbm93bGVkZ2UgbWFuYWdlbWVudCBpbiBpbmZvcm1hdGlvbiB0ZWNobm9sb2d5IHNlcnZpY2VzLnBkZgAADgESAIgAUgBlAGYAZQByAGUAbgBjAGUAIABhAHIAYwBoAGkAdABlAGMAdAB1AHIAZQAsACAAbQBlAHQAYQBtAG8AZABlAGwALAAgAGEAbgBkACAAbQBvAGQAZQBsAGkAbgBnACAAcAByAGkAbgBjAGkAcABsAGUAcwAgAGYAbwByACAAYQByAGMAaABpAHQAZQBjAHQAdQByAGEAbAAgAGsAbgBvAHcAbABlAGQAZwBlACAAbQBhAG4AYQBnAGUAbQBlAG4AdAAgAGkAbgAgAGkAbgBmAG8AcgBtAGEAdABpAG8AbgAgAHQAZQBjAGgAbgBvAGwAbwBnAHkAIABzAGUAcgB2AGkAYwBlAHMALgBwAGQAZgAPAAoABABEAGEAdABhABIAsVVzZXJzL3lzemhhbmcvRG9jdW1lbnRzL25vdGVzL3BhcGVycy9kc2wvUmVmZXJlbmNlIGFyY2hpdGVjdHVyZSwgbWV0YW1vZGVsLCBhbmQgbW9kZWxpbmcgcHJpbmNpcGxlcyBmb3IgYXJjaGl0ZWN0dXJhbCBrbm93bGVkZ2UgbWFuYWdlbWVudCBpbiBpbmZvcm1hdGlvbiB0ZWNobm9sb2d5IHNlcnZpY2VzLnBkZgAAEwABLwAAFQACAA7//wAAAAgADQAaACQArwAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAPz},
	bdsk-url-1 = {https://www.sciencedirect.com/science/article/pii/S0164121212001343},
	bdsk-url-2 = {https://doi.org/10.1016/j.jss.2012.05.003}}

@article{korobeynikov2017development,
	author = {Korobeynikov, Anatoly Grigorevich and Fedosovsky, Michael Evgenievich and Gurjanov, Andrey Vladimirovich and Zharinov, Igor Olegovich and Shukalov, Anatoly Vladimirovich},
	date-added = {2021-12-28 21:12:06 +1100},
	date-modified = {2021-12-28 21:14:24 +1100},
	journal = {International Journal of Applied Engineering Research},
	keywords = {Computer-Aided Design, Category Theory, Information Technologies, Mathematical Model, Conceptual Modeling},
	number = {6},
	pages = {1114--1122},
	title = {Development of conceptual modeling method to solve the tasks of computer-aided design of difficult technical complexes on the basis of category theory},
	volume = {12},
	year = {2017},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxARaWphZXJ2MTJuNl80Ni5wZGZPEQFiAAAAAAFiAAIAAAREYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8RaWphZXJ2MTJuNl80Ni5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAIAAAogY3UAAAAAAAAAAAAAAAAAA2RzbAAAAgA8LzpVc2Vyczp5c3poYW5nOkRvY3VtZW50czpub3RlczpwYXBlcnM6ZHNsOmlqYWVydjEybjZfNDYucGRmAA4AJAARAGkAagBhAGUAcgB2ADEAMgBuADYAXwA0ADYALgBwAGQAZgAPAAoABABEAGEAdABhABIAOlVzZXJzL3lzemhhbmcvRG9jdW1lbnRzL25vdGVzL3BhcGVycy9kc2wvaWphZXJ2MTJuNl80Ni5wZGYAEwABLwAAFQACAA7//wAAAAgADQAaACQAOAAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAGe}}

@inproceedings{5392879,
	abstract = {Domain specific languages provide appropriate built-in abstractions and notations in a particular problem domain, and have been suggested as means for developing highly adaptable software systems. The paper presents a theory-based framework to support domain-specific design and implementation. Focusing concern on reasoning about interactive relationships among software models and objects at different levels of abstraction and granularity, our framework provides a unified categorial environment for intra-model composition and inter-model refinement of specifications via category theoretic computations, and therefore enables a high- level of reusability and dynamic adaptability.},
	author = {Ling, Haifeng and Zhou, Xianzhong and Zheng, Yujun},
	booktitle = {2009 Fourth International Conference on Frontier of Computer Science and Technology},
	date-added = {2021-12-28 21:02:17 +1100},
	date-modified = {2021-12-28 21:02:49 +1100},
	doi = {10.1109/FCST.2009.102},
	keywords = {Category Theory},
	pages = {460-466},
	title = {Design and Implementation of DSL via Category Theoretic Computations},
	year = {2009},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBIRGVzaWduX2FuZF9JbXBsZW1lbnRhdGlvbl9vZl9EU0xfdmlhX0NhdGVnb3J5X1RoZW9yZXRpY19Db21wdXRhdGlvbnMucGRmTxECQAAAAAACQAACAAAERGF0YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////H0Rlc2lnbl9hbmRfSW1wbGVtZSNGRkZGRkZGRi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAQACAAAKIGN1AAAAAAAAAAAAAAAAAANkc2wAAAIAcy86VXNlcnM6eXN6aGFuZzpEb2N1bWVudHM6bm90ZXM6cGFwZXJzOmRzbDpEZXNpZ25fYW5kX0ltcGxlbWVudGF0aW9uX29mX0RTTF92aWFfQ2F0ZWdvcnlfVGhlb3JldGljX0NvbXB1dGF0aW9ucy5wZGYAAA4AkgBIAEQAZQBzAGkAZwBuAF8AYQBuAGQAXwBJAG0AcABsAGUAbQBlAG4AdABhAHQAaQBvAG4AXwBvAGYAXwBEAFMATABfAHYAaQBhAF8AQwBhAHQAZQBnAG8AcgB5AF8AVABoAGUAbwByAGUAdABpAGMAXwBDAG8AbQBwAHUAdABhAHQAaQBvAG4AcwAuAHAAZABmAA8ACgAEAEQAYQB0AGEAEgBxVXNlcnMveXN6aGFuZy9Eb2N1bWVudHMvbm90ZXMvcGFwZXJzL2RzbC9EZXNpZ25fYW5kX0ltcGxlbWVudGF0aW9uX29mX0RTTF92aWFfQ2F0ZWdvcnlfVGhlb3JldGljX0NvbXB1dGF0aW9ucy5wZGYAABMAAS8AABUAAgAO//8AAAAIAA0AGgAkAG8AAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAACsw==},
	bdsk-url-1 = {https://doi.org/10.1109/FCST.2009.102}}

@article{10.1145/331963.331975,
	abstract = {The impact of Domain Specific Languages (DSLs) on software design is considerable. They allow programs to be more concise than equivalent programs written in a high-level programming languages. They relieve programmers from making decisions about data-structure and algorithm design, and thus allows solutions to be constructed quickly. Because DSL's are at a higher level of abstraction they are easier to maintain and reason about than equivalent programs written in a high-level language, and perhaps most importantly they can be written by domain experts rather than programmers.The problem is that DSL implementation is costly and prone to errors, and that high level approaches to DSL implementation often produce inefficient systems. By using two new programming language mechanisms, program staging and monadic abstraction, we can lower the cost of DSL implementations by allowing reuse at many levels. These mechanisms provide the expressive power that allows the construction of many compiler components as reusable libraries, provide a direct link between the semantics and the low-level implementation, and provide the structure necessary to reason about the implementation.},
	address = {New York, NY, USA},
	author = {Sheard, Tim and Benaissa, Zine-el-abidine and Pasalic, Emir},
	date-added = {2021-12-28 20:57:56 +1100},
	date-modified = {2021-12-28 20:58:39 +1100},
	doi = {10.1145/331963.331975},
	issn = {0362-1340},
	issue_date = {Jan. 2000},
	journal = {SIGPLAN Not.},
	keywords = {DSL, Category Theory, Monad},
	month = {dec},
	number = {1},
	numpages = {14},
	pages = {81--94},
	publisher = {Association for Computing Machinery},
	title = {DSL Implementation Using Staging and Monads},
	url = {https://doi.org/10.1145/331963.331975},
	volume = {35},
	year = {2000},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAwIERTTCBJbXBsZW1lbnRhdGlvbiBVc2luZyBTdGFnaW5nIGFuZCBNb25hZHMucGRmTxEB4AAAAAAB4AACAAAERGF0YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////HyBEU0wgSW1wbGVtZW50YXRpbyNGRkZGRkZGRi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAQACAAAKIGN1AAAAAAAAAAAAAAAAAANkc2wAAAIAWy86VXNlcnM6eXN6aGFuZzpEb2N1bWVudHM6bm90ZXM6cGFwZXJzOmRzbDogRFNMIEltcGxlbWVudGF0aW9uIFVzaW5nIFN0YWdpbmcgYW5kIE1vbmFkcy5wZGYAAA4AYgAwACAARABTAEwAIABJAG0AcABsAGUAbQBlAG4AdABhAHQAaQBvAG4AIABVAHMAaQBuAGcAIABTAHQAYQBnAGkAbgBnACAAYQBuAGQAIABNAG8AbgBhAGQAcwAuAHAAZABmAA8ACgAEAEQAYQB0AGEAEgBZVXNlcnMveXN6aGFuZy9Eb2N1bWVudHMvbm90ZXMvcGFwZXJzL2RzbC8gRFNMIEltcGxlbWVudGF0aW9uIFVzaW5nIFN0YWdpbmcgYW5kIE1vbmFkcy5wZGYAABMAAS8AABUAAgAO//8AAAAIAA0AGgAkAFcAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAACOw==},
	bdsk-url-1 = {https://doi.org/10.1145/331963.331975}}

@article{shen2021domain,
	abstract = {As a part of domain-specific development, Domain-Specific Language (DSL) is widely used in both the academia and industry to solve different aspects of the problems in engineering. A DSL is a customized language whose expressiveness is tailored to a well-defined application domain, so as to offer an effective interface for the domain experts. To mitigate the programming complexity of the General-Purpose Programming Languages, and meanwhile maintain the precise expression towards some exact engineering domains, DSLs present a higher level of abstraction than low-level interfaces, while providing much more flexibility than high-level interfaces. Nevertheless, it lacks a survey to have a systematic overview of the essential commonalities shared by those works. In this survey, we take a brand-new perspective, to categorize the state-of-the-art works into different categories, tailored to three fundamental implementation concerns of DSLs: abstract syntax, concrete syntax, and semantics. Specifically, they are characterized according to their parsing and mapping strategy (external/internal) between the abstract syntax and concrete syntax, the mapping results (textual/graphical symbols), and also the functions they emphasize (modeling, visualizing, etc.). Integrated with the literature, we finally summarized the research overview of DSLs.},
	annote = {A review of different types of DSL.

- External/Internal DSL
- Textual/Graphical DSL
- DSVL, DSML, DSEL},
	author = {Shen, Liming and Chen, Xueyi and Liu, Richen and Wang, Hailong and Ji, Genlin},
	date-added = {2021-12-28 20:36:29 +1100},
	date-modified = {2021-12-28 20:38:58 +1100},
	journal = {Archives of Computational Methods in Engineering},
	keywords = {DSL, review},
	number = {4},
	pages = {3113--3134},
	publisher = {Springer},
	rating = {5},
	read = {1},
	title = {Domain-Specific Language Techniques for Visual Computing: A Comprehensive Study},
	volume = {28},
	year = {2021},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAzU2hlbjIwMjFfQXJ0aWNsZV9Eb21haW4tU3BlY2lmaWNMYW5ndWFnZVRlY2huaXEucGRmTxEB6gAAAAAB6gACAAAERGF0YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////H1NoZW4yMDIxX0FydGljbGVfRCNGRkZGRkZGRi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAQACAAAKIGN1AAAAAAAAAAAAAAAAAANkc2wAAAIAXi86VXNlcnM6eXN6aGFuZzpEb2N1bWVudHM6bm90ZXM6cGFwZXJzOmRzbDpTaGVuMjAyMV9BcnRpY2xlX0RvbWFpbi1TcGVjaWZpY0xhbmd1YWdlVGVjaG5pcS5wZGYADgBoADMAUwBoAGUAbgAyADAAMgAxAF8AQQByAHQAaQBjAGwAZQBfAEQAbwBtAGEAaQBuAC0AUwBwAGUAYwBpAGYAaQBjAEwAYQBuAGcAdQBhAGcAZQBUAGUAYwBoAG4AaQBxAC4AcABkAGYADwAKAAQARABhAHQAYQASAFxVc2Vycy95c3poYW5nL0RvY3VtZW50cy9ub3Rlcy9wYXBlcnMvZHNsL1NoZW4yMDIxX0FydGljbGVfRG9tYWluLVNwZWNpZmljTGFuZ3VhZ2VUZWNobmlxLnBkZgATAAEvAAAVAAIADv//AAAACAANABoAJABaAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAkg=}}

@article{5416705,
	annote = {A DSL generate images base on an shape gramma model and a designer sketch},
	author = {Li, Yuanyuan and Bao, Fan and Zhang, Eugene and Kobayashi, Yoshihiro and Wonka, Peter},
	date-added = {2021-12-28 20:17:34 +1100},
	date-modified = {2021-12-28 20:20:16 +1100},
	doi = {10.1109/TVCG.2010.36},
	journal = {IEEE Transactions on Visualization and Computer Graphics},
	keywords = {shape grammars, tensor fields, vector fields, surfaces, geometry synthesis},
	number = {2},
	pages = {231-243},
	title = {Geometry Synthesis on Surfaces Using Field-Guided Shape Grammars},
	volume = {17},
	year = {2011},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAVZmllbGRncmFtbWFycGFwZXIucGRmTxEBcgAAAAABcgACAAAERGF0YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////FWZpZWxkZ3JhbW1hcnBhcGVyLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAQACAAAKIGN1AAAAAAAAAAAAAAAAAANkc2wAAAIAQC86VXNlcnM6eXN6aGFuZzpEb2N1bWVudHM6bm90ZXM6cGFwZXJzOmRzbDpmaWVsZGdyYW1tYXJwYXBlci5wZGYADgAsABUAZgBpAGUAbABkAGcAcgBhAG0AbQBhAHIAcABhAHAAZQByAC4AcABkAGYADwAKAAQARABhAHQAYQASAD5Vc2Vycy95c3poYW5nL0RvY3VtZW50cy9ub3Rlcy9wYXBlcnMvZHNsL2ZpZWxkZ3JhbW1hcnBhcGVyLnBkZgATAAEvAAAVAAIADv//AAAACAANABoAJAA8AAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAbI=},
	bdsk-url-1 = {https://doi.org/10.1109/TVCG.2010.36}}

@inproceedings{cosentino2015model,
	abstract = {Developers in modern general-purpose programming languages create reusable code libraries by encapsulating them in Applications Programming Interfaces (APIs). Domain-specific languages (DSLs) can be developed as an alternative method for code abstraction and distribution, sometimes preferable to APIs because of their expressivity and tailored development environment. 

However the cost of implementing a fully functional development environment for a DSL is generally higher. 

In this paper we propose DSLit, a prototype-tool that, given an existing API, reduces the cost of developing a corresponding DSL by analyzing the API, automatically generating a semantically equivalent DSL with its complete development environment, and allowing for user customization. To build this bridge between the API and DSL technical spaces we make use of exist- ing Model-Driven Engineering (MDE) techniques, further promoting the vision of MDE as a unifying technical space.},
	annote = {In this paper we propose DSLit, a prototype-tool that, given an existing API, reduces the cost of developing a corresponding DSL by analyzing the API, automatically generating a semantically equivalent DSL with its complete development environment},
	author = {Cosentino, Valerio and Tisi, Massimo and Izquierdo, Javier Luis C{\'a}novas},
	booktitle = {International Conference on Current Trends in Theory and Practice of Informatics},
	date-added = {2021-12-28 14:53:49 +1100},
	date-modified = {2022-01-11 11:40:56 +1100},
	keywords = {DSL, MDE, OOP},
	organization = {Springer},
	pages = {423--435},
	title = {A model-driven approach to generate external dsls from object-oriented apis},
	year = {2015},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhV2RzbC5iaWJPEQE6AAAAAAE6AAIAAAREYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8HZHNsLmJpYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAIAAAogY3UAAAAAAAAAAAAAAAAAA2RzbAAAAgAyLzpVc2Vyczp5c3poYW5nOkRvY3VtZW50czpub3RlczpwYXBlcnM6ZHNsOmRzbC5iaWIADgAQAAcAZABzAGwALgBiAGkAYgAPAAoABABEAGEAdABhABIAMFVzZXJzL3lzemhhbmcvRG9jdW1lbnRzL25vdGVzL3BhcGVycy9kc2wvZHNsLmJpYgATAAEvAAAVAAIADv//AAAACAANABoAJAAsAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAWo=}}

@article{mernik2005and,
	abstract = {Domain-specific languages (DSLs) are languages tailored to a specific application domain. They offer substantial gains in expressiveness and ease of use compared with general-purpose programming languages in their domain of application. DSL development is hard, requiring both domain knowledge and language development expertise. Few people have both. Not surprisingly, the decision to develop a DSL is often postponed indefinitely, if considered at all, and most DSLs never get beyond the application library stage.

Although many articles have been written on the development of particular DSLs, there is very limited literature on DSL development methodologies and many questions remain regarding when and how to develop a DSL. To aid the DSL developer, we identify patterns in the decision, analysis, design, and implementation phases of DSL development. Our patterns improve and extend earlier work on DSL design patterns. We also discuss domain analysis tools and language development systems that may help to speed up DSL development. Finally, we present a number of open problems.},
	author = {Mernik, Marjan and Heering, Jan and Sloane, Anthony M},
	date-added = {2021-12-28 13:42:47 +1100},
	date-modified = {2022-01-11 11:39:36 +1100},
	journal = {ACM computing surveys (CSUR)},
	keywords = {DSL},
	number = {4},
	pages = {316--344},
	publisher = {ACM New York, NY, USA},
	title = {When and how to develop domain-specific languages},
	volume = {37},
	year = {2005},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhW1doZW5EU0wucGRmTxEBSgAAAAABSgACAAAERGF0YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////C1doZW5EU0wucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAQACAAAKIGN1AAAAAAAAAAAAAAAAAANkc2wAAAIANi86VXNlcnM6eXN6aGFuZzpEb2N1bWVudHM6bm90ZXM6cGFwZXJzOmRzbDpXaGVuRFNMLnBkZgAOABgACwBXAGgAZQBuAEQAUwBMAC4AcABkAGYADwAKAAQARABhAHQAYQASADRVc2Vycy95c3poYW5nL0RvY3VtZW50cy9ub3Rlcy9wYXBlcnMvZHNsL1doZW5EU0wucGRmABMAAS8AABUAAgAO//8AAAAIAA0AGgAkADAAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAABfg==}}

@article{van2007model,
	abstract = {Software systems need to evolve, and systems built using model-driven approaches are no exception. What compli- cates model-driven engineering is that it requires multiple dimensions of evolution. In regular evolution, the model- ing language is used to make the changes. In meta-model evolution, changes are required to the modeling notation. In platform evolution, the code generators and application framework change to reflect new requirements on the target platform. Finally, in abstraction evolution, new modeling languages are added to the set of (modeling) languages to reflect increased understanding of a technical or business domain. While MDE has been optimized for regular evo- lution, presently little or no support exists for metamodel, platform and abstraction evolution. In this paper, we an- alyze the problems raised by the evolution of model-based software systems and identify challenges to be addressed by research in this area.},
	author = {Van Deursen, Arie and Visser, Eelco and Warmer, Jos},
	date-added = {2021-12-27 22:23:36 +1100},
	date-modified = {2022-01-11 11:40:09 +1100},
	journal = {Technical Report Series TUD-SERG-2007-006},
	keywords = {MDA},
	publisher = {Citeseer},
	title = {Model-driven software evolution: A research agenda},
	year = {2007},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA1TW9kZWwtRHJpdmVuIFNvZnR3YXJlIEV2b2x1dGlvbiBBIFJlc2VhcmNoIEFnZW5kYS5wZGZPEQHyAAAAAAHyAAIAAAREYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8fTW9kZWwtRHJpdmVuIFNvZnR3I0ZGRkZGRkZGLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAIAAAogY3UAAAAAAAAAAAAAAAAAA2RzbAAAAgBgLzpVc2Vyczp5c3poYW5nOkRvY3VtZW50czpub3RlczpwYXBlcnM6ZHNsOk1vZGVsLURyaXZlbiBTb2Z0d2FyZSBFdm9sdXRpb24gQSBSZXNlYXJjaCBBZ2VuZGEucGRmAA4AbAA1AE0AbwBkAGUAbAAtAEQAcgBpAHYAZQBuACAAUwBvAGYAdAB3AGEAcgBlACAARQB2AG8AbAB1AHQAaQBvAG4AIABBACAAUgBlAHMAZQBhAHIAYwBoACAAQQBnAGUAbgBkAGEALgBwAGQAZgAPAAoABABEAGEAdABhABIAXlVzZXJzL3lzemhhbmcvRG9jdW1lbnRzL25vdGVzL3BhcGVycy9kc2wvTW9kZWwtRHJpdmVuIFNvZnR3YXJlIEV2b2x1dGlvbiBBIFJlc2VhcmNoIEFnZW5kYS5wZGYAEwABLwAAFQACAA7//wAAAAgADQAaACQAXAAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAJS}}

@inproceedings{jouault2006km3,
	abstract = {More than five years ago, the OMG proposed the Model Driven Architecture (MDATM) approach to deal with the separation of platform dependent and independent aspects in information systems. Since then, the initial idea of MDA evolved and Model Driven Engineering (MDE) is being increasingly promoted to handle separation and combination of various kinds of concerns in software or data engineering. MDE is more general than the set of standards and practices recommended by the OMG's MDA proposal. In MDE the concept of model designates not only OMG models but a lot of other artifacts like XML documents, Java programs, RDBMS data, etc. Today we observe another evolutionary step. A convergence between MDE and DSL (Domain Specific Language) engineering is rapidly appearing. In the same way as MDE is a generalization of MDA, the DSL engineering may be viewed as a generalization of MDE. One of the goals of this paper is to explore the potential of this important evolution of engineering practices. In order to anchor the discussion on practical grounds, we present a set of typical problems that could be solved by classical (object-oriented and others), MDE, or DSL-based techniques. Solutions to these problems will be based on current platforms (EMF, AMMA, GME, etc.). This paper illustrates how powerful model-based frameworks, allowing to use and build a variety of DSLs, may help to solve complex problems in a more efficient way.},
	author = {Jouault, Fr{\'e}d{\'e}ric and B{\'e}zivin, Jean},
	booktitle = {International Conference on Formal Methods for Open Object-Based Distributed Systems},
	date-added = {2021-12-27 16:46:15 +1100},
	date-modified = {2022-01-11 11:42:10 +1100},
	keywords = { MDE, MDA, DSL, Tool-based approaches},
	organization = {Springer},
	pages = {171--185},
	rating = {5},
	read = {1},
	title = {KM3: a DSL for Metamodel Specification},
	year = {2006},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBHTW9kZWwtYmFzZWRfRFNMX2ZyYW1ld29ya3MyMDE1MTAyNy0xNDIxOC0xZGd4b3IyLXdpdGgtY292ZXItcGFnZS12Mi5wZGZPEQI6AAAAAAI6AAIAAAREYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8fTW9kZWwtYmFzZWRfRFNMX2ZyI0ZGRkZGRkZGLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAIAAAogY3UAAAAAAAAAAAAAAAAAA2RzbAAAAgByLzpVc2Vyczp5c3poYW5nOkRvY3VtZW50czpub3RlczpwYXBlcnM6ZHNsOk1vZGVsLWJhc2VkX0RTTF9mcmFtZXdvcmtzMjAxNTEwMjctMTQyMTgtMWRneG9yMi13aXRoLWNvdmVyLXBhZ2UtdjIucGRmAA4AkABHAE0AbwBkAGUAbAAtAGIAYQBzAGUAZABfAEQAUwBMAF8AZgByAGEAbQBlAHcAbwByAGsAcwAyADAAMQA1ADEAMAAyADcALQAxADQAMgAxADgALQAxAGQAZwB4AG8AcgAyAC0AdwBpAHQAaAAtAGMAbwB2AGUAcgAtAHAAYQBnAGUALQB2ADIALgBwAGQAZgAPAAoABABEAGEAdABhABIAcFVzZXJzL3lzemhhbmcvRG9jdW1lbnRzL25vdGVzL3BhcGVycy9kc2wvTW9kZWwtYmFzZWRfRFNMX2ZyYW1ld29ya3MyMDE1MTAyNy0xNDIxOC0xZGd4b3IyLXdpdGgtY292ZXItcGFnZS12Mi5wZGYAEwABLwAAFQACAA7//wAAAAgADQAaACQAbgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAKs},
	bdsk-file-2 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA4Li4vLi4vU3lzdGVtRGVzaWduL3BhcGVycy9Nb2RlbC1iYXNlcyBEU0wgRnJhbWV3b3Jrcy5wZGZPEQGqAAAAAAGqAAIAAAREYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8eTW9kZWwtYmFzZXMgRFNMIEZyYW1ld29ya3MucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAACAAMAAAogY3UAAAAAAAAAAAAAAAAABnBhcGVycwACAFIvOlVzZXJzOnlzemhhbmc6RG9jdW1lbnRzOm5vdGVzOlN5c3RlbURlc2lnbjpwYXBlcnM6TW9kZWwtYmFzZXMgRFNMIEZyYW1ld29ya3MucGRmAA4APgAeAE0AbwBkAGUAbAAtAGIAYQBzAGUAcwAgAEQAUwBMACAARgByAGEAbQBlAHcAbwByAGsAcwAuAHAAZABmAA8ACgAEAEQAYQB0AGEAEgBQVXNlcnMveXN6aGFuZy9Eb2N1bWVudHMvbm90ZXMvU3lzdGVtRGVzaWduL3BhcGVycy9Nb2RlbC1iYXNlcyBEU0wgRnJhbWV3b3Jrcy5wZGYAEwABLwAAFQACAA7//wAAAAgADQAaACQAXwAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAIN}}

@comment{BibDesk Static Groups{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>group name</key>
		<string>Readings</string>
		<key>keys</key>
		<string>dapoigny2013modeling,belohlavek2008introduction,ulitin2019ontology</string>
	</dict>
</array>
</plist>
}}

@comment{BibDesk Smart Groups{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>conditions</key>
		<array>
			<dict>
				<key>comparison</key>
				<integer>4</integer>
				<key>key</key>
				<string>Read</string>
				<key>value</key>
				<string>1</string>
				<key>version</key>
				<string>1</string>
			</dict>
		</array>
		<key>conjunction</key>
		<integer>0</integer>
		<key>group name</key>
		<string>Read</string>
	</dict>
</array>
</plist>
}}
